{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Docs","text":"<p>This is my first documentation page using GitHub Pages and MkDocs.</p>"},{"location":"automation-scripts/ecr-cleanup/","title":"AWS ECR Image Cleanup Script","text":""},{"location":"automation-scripts/ecr-cleanup/#overview","title":"Overview","text":"<p>This Python script automates the cleanup of old Docker images stored in AWS Elastic Container Registry (ECR). It helps in managing storage costs and maintaining a clean repository by deleting images older than a specified number of days.</p>"},{"location":"automation-scripts/ecr-cleanup/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3 installed</li> <li>AWS CLI configured with the appropriate credentials</li> <li>Boto3 installed (<code>pip install boto3</code>)</li> </ul>"},{"location":"automation-scripts/ecr-cleanup/#configuration","title":"Configuration","text":"<p>Modify the following parameters in the script as per your requirements: - <code>REGION</code>: AWS region where your ECR repository is located - <code>REPO_NAME</code>: Name of the ECR repository - <code>DAYS_THRESHOLD</code>: Number of days beyond which images should be deleted</p>"},{"location":"automation-scripts/ecr-cleanup/#installation","title":"Installation","text":"<ol> <li>Ensure you have Python and required dependencies installed.</li> <li>Install dependencies:    <code>sh    pip install boto3</code></li> </ol>"},{"location":"automation-scripts/ecr-cleanup/#usage","title":"Usage","text":"<p>Run the script using:</p> <pre><code>python cleanup_ecr_images.py\n</code></pre>"},{"location":"automation-scripts/ecr-cleanup/#aws-permissions","title":"AWS Permissions","text":"<p>Ensure that the IAM user or role executing the script has the following permissions:</p> <pre><code>{\n    \"Effect\": \"Allow\",\n    \"Action\": [\n        \"ecr:DescribeImages\",\n        \"ecr:BatchDeleteImage\"\n    ],\n    \"Resource\": \"*\"\n}\n</code></pre>"},{"location":"automation-scripts/ecr-cleanup/#notes","title":"Notes","text":"<ul> <li>This script permanently deletes Docker images from AWS ECR. Double-check before running it in a production environment.</li> <li>Consider testing in a non-production AWS account before applying it to a live setup.</li> </ul>"},{"location":"automation-scripts/ecr-cleanup/#license","title":"License","text":"<p>MIT License</p>"},{"location":"automation-scripts/system-monitor/","title":"\ud83d\udcca System Monitor Script","text":"<p>This Python script monitors your system's CPU, memory, and disk usage. If any of these metrics exceed predefined thresholds, it sends email and Slack alerts.</p>"},{"location":"automation-scripts/system-monitor/#features","title":"\ud83d\ude80 Features","text":"<ul> <li>Real-time system resource monitoring</li> <li>Configurable thresholds for CPU, memory, and disk usage</li> <li>Sends alerts via Email and Slack</li> <li>Logs all activities to <code>logs/system_monitor.log</code></li> </ul>"},{"location":"automation-scripts/system-monitor/#configuration","title":"\u2699\ufe0f Configuration","text":"<p>All configurations are hardcoded in <code>system_monitor.py</code>:</p>"},{"location":"automation-scripts/system-monitor/#1-thresholds","title":"1\ufe0f\u20e3 Thresholds","text":"<pre><code>self.thresholds = {\n    'cpu_percent': 80,       # CPU usage threshold\n    'memory_percent': 85,    # Memory usage threshold\n    'disk_percent': 90       # Disk usage threshold\n}\n</code></pre>"},{"location":"automation-scripts/system-monitor/#2-email-configuration","title":"2\ufe0f\u20e3 Email Configuration","text":"<pre><code>self.email_config = {\n    'smtp_server': 'smtp.gmail.com',\n    'smtp_port': 465,\n    'username': 'your-email@gmail.com',       # Your Gmail address\n    'password': 'your-app-password',          # App password (not your Gmail password)\n    'from_email': 'your-email@gmail.com',     # Sender email\n    'to_email': 'recipient-email@example.com' # Recipient email\n}\n</code></pre>"},{"location":"automation-scripts/system-monitor/#3-slack-webhook","title":"3\ufe0f\u20e3 Slack Webhook","text":"<pre><code>self.slack_webhook = 'https://hooks.slack.com/services/YOUR/WEBHOOK/URL'\n</code></pre>"},{"location":"automation-scripts/system-monitor/#setting-up-gmail-smtp","title":"\ud83d\udce7 Setting Up Gmail SMTP","text":"<ol> <li>Enable 2-Step Verification in your Google Account.</li> <li>Generate an App Password:</li> <li>Go to Google App Passwords</li> <li>Select Mail and Other (Custom name) (e.g., \"System Monitor Script\")</li> <li>Copy the generated password and use it as <code>password</code> in the script.</li> </ol>"},{"location":"automation-scripts/system-monitor/#running-the-script","title":"\u26a1 Running the Script","text":"<pre><code>python system_monitor.py\n</code></pre> <p>The script will: - Check system health - Send email and Slack alerts if any thresholds are breached - Log activities in <code>logs/system_monitor.log</code></p>"},{"location":"automation-scripts/system-monitor/#log-files","title":"\ud83d\udcc2 Log Files","text":"<p>Logs are saved in the <code>logs/</code> directory:</p> <pre><code>logs/system_monitor.log\n</code></pre>"},{"location":"automation-scripts/system-monitor/#dependencies","title":"\ud83d\udee0\ufe0f Dependencies","text":"<ul> <li><code>psutil</code></li> <li><code>requests</code></li> </ul>"},{"location":"automation-scripts/system-monitor/#install-dependencies","title":"Install dependencies:","text":"<pre><code>pip install psutil requests\n</code></pre>"},{"location":"automation-scripts/system-monitor/#license","title":"\ud83d\udcdc License","text":"<p>This project is licensed under the MIT License.</p>"},{"location":"cost-optimization/aws-optimization/","title":"AWS Cost Optimization Guide","text":""},{"location":"cost-optimization/aws-optimization/#1-monitor-and-analyze-usage","title":"1. Monitor and Analyze Usage","text":"<ul> <li>Use AWS Cost Explorer to analyze spending patterns.</li> <li>Set up AWS Budgets to track usage and costs.</li> <li>Enable Cost Anomaly Detection for unusual spikes.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#2-optimize-compute-costs","title":"2. Optimize Compute Costs","text":"<ul> <li>Use AWS Compute Savings Plans or Reserved Instances (RIs) for predictable workloads.</li> <li>Leverage Spot Instances for fault-tolerant workloads.</li> <li>Right-size EC2 instances using AWS Compute Optimizer.</li> <li>Consider AWS Lambda for event-driven workloads to reduce idle costs.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#3-optimize-storage-costs","title":"3. Optimize Storage Costs","text":"<ul> <li>Use S3 Lifecycle Policies to transition infrequently accessed data to cheaper storage classes.</li> <li>Enable S3 Intelligent-Tiering for automatic cost optimization.</li> <li>Delete unused EBS volumes and snapshots.</li> <li>Use Glacier for long-term archiving.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#4-networking-cost-optimization","title":"4. Networking Cost Optimization","text":"<ul> <li>Utilize AWS PrivateLink and VPC endpoints to minimize data transfer costs.</li> <li>Use CloudFront for content delivery to reduce outbound bandwidth.</li> <li>Avoid unnecessary cross-region data transfers.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#5-database-cost-savings","title":"5. Database Cost Savings","text":"<ul> <li>Use Aurora Serverless for variable database workloads.</li> <li>Right-size RDS instances and use Reserved Instances.</li> <li>Consider Amazon DynamoDB On-Demand Mode for unpredictable workloads.</li> <li>Enable automatic backups but delete old, unused backups.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#6-rightsizing-and-deleting-unused-resources","title":"6. Rightsizing and Deleting Unused Resources","text":"<ul> <li>Identify and delete unused EC2 instances, EBS volumes, and load balancers.</li> <li>Stop or schedule instances to shut down during non-peak hours.</li> <li>Use Instance Scheduler to automate instance start/stop.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#7-optimize-licensing-costs","title":"7. Optimize Licensing Costs","text":"<ul> <li>Use AWS License Manager to track and optimize license usage.</li> <li>Migrate workloads to open-source alternatives when feasible.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#8-use-aws-free-tier-and-credits","title":"8. Use AWS Free Tier and Credits","text":"<ul> <li>Take advantage of AWS Free Tier for eligible services.</li> <li>Apply AWS promotional credits if available.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#9-enable-cost-allocation-tags","title":"9. Enable Cost Allocation Tags","text":"<ul> <li>Use cost allocation tags to track spending per team, project, or environment.</li> <li>Group resources under AWS Organizations for better cost management.</li> </ul>"},{"location":"cost-optimization/aws-optimization/#10-automate-cost-optimization","title":"10. Automate Cost Optimization","text":"<ul> <li>Implement AWS Auto Scaling for dynamic resource allocation.</li> <li>Use AWS Lambda functions to automatically terminate unused resources.</li> <li>Set up AWS Trusted Advisor to get cost-saving recommendations.</li> </ul> <p>By implementing these strategies, you can efficiently reduce AWS costs while maintaining optimal performance. \ud83d\ude80</p>"}]}